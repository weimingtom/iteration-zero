# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _guichan
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _guichan.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _guichan.PySwigIterator_value(*args)
    def incr(*args): return _guichan.PySwigIterator_incr(*args)
    def decr(*args): return _guichan.PySwigIterator_decr(*args)
    def distance(*args): return _guichan.PySwigIterator_distance(*args)
    def equal(*args): return _guichan.PySwigIterator_equal(*args)
    def copy(*args): return _guichan.PySwigIterator_copy(*args)
    def next(*args): return _guichan.PySwigIterator_next(*args)
    def previous(*args): return _guichan.PySwigIterator_previous(*args)
    def advance(*args): return _guichan.PySwigIterator_advance(*args)
    def __eq__(*args): return _guichan.PySwigIterator___eq__(*args)
    def __ne__(*args): return _guichan.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _guichan.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _guichan.PySwigIterator___isub__(*args)
    def __add__(*args): return _guichan.PySwigIterator___add__(*args)
    def __sub__(*args): return _guichan.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _guichan.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class StringVector(_object):
    """Proxy of C++ StringVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _guichan.StringVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _guichan.StringVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _guichan.StringVector___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _guichan.StringVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> StringVector"""
        return _guichan.StringVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, StringVector v)"""
        return _guichan.StringVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _guichan.StringVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _guichan.StringVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _guichan.StringVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _guichan.StringVector___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _guichan.StringVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _guichan.StringVector_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _guichan.StringVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _guichan.StringVector_clear(*args)

    def swap(*args):
        """swap(self, StringVector v)"""
        return _guichan.StringVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _guichan.StringVector_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _guichan.StringVector_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _guichan.StringVector_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _guichan.StringVector_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _guichan.StringVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _guichan.StringVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _guichan.StringVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> StringVector
        __init__(self, StringVector ?) -> StringVector
        __init__(self, size_type size) -> StringVector
        __init__(self, size_type size, value_type value) -> StringVector
        """
        this = _guichan.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _guichan.StringVector_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _guichan.StringVector_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _guichan.StringVector_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _guichan.StringVector_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _guichan.StringVector_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _guichan.StringVector_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _guichan.StringVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _guichan.StringVector_capacity(*args)

    __swig_destroy__ = _guichan.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _guichan.StringVector_swigregister
StringVector_swigregister(StringVector)

class UintVector(_object):
    """Proxy of C++ UintVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UintVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UintVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _guichan.UintVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _guichan.UintVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _guichan.UintVector___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _guichan.UintVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> UintVector"""
        return _guichan.UintVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, UintVector v)"""
        return _guichan.UintVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _guichan.UintVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _guichan.UintVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _guichan.UintVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _guichan.UintVector___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _guichan.UintVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _guichan.UintVector_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _guichan.UintVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _guichan.UintVector_clear(*args)

    def swap(*args):
        """swap(self, UintVector v)"""
        return _guichan.UintVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _guichan.UintVector_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _guichan.UintVector_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _guichan.UintVector_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _guichan.UintVector_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _guichan.UintVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _guichan.UintVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _guichan.UintVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> UintVector
        __init__(self, UintVector ?) -> UintVector
        __init__(self, size_type size) -> UintVector
        __init__(self, size_type size, value_type value) -> UintVector
        """
        this = _guichan.new_UintVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _guichan.UintVector_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _guichan.UintVector_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _guichan.UintVector_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _guichan.UintVector_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _guichan.UintVector_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _guichan.UintVector_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _guichan.UintVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _guichan.UintVector_capacity(*args)

    __swig_destroy__ = _guichan.delete_UintVector
    __del__ = lambda self : None;
UintVector_swigregister = _guichan.UintVector_swigregister
UintVector_swigregister(UintVector)

class IntVector(_object):
    """Proxy of C++ IntVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _guichan.IntVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _guichan.IntVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _guichan.IntVector___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _guichan.IntVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> IntVector"""
        return _guichan.IntVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, IntVector v)"""
        return _guichan.IntVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _guichan.IntVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _guichan.IntVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _guichan.IntVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _guichan.IntVector___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _guichan.IntVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _guichan.IntVector_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _guichan.IntVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _guichan.IntVector_clear(*args)

    def swap(*args):
        """swap(self, IntVector v)"""
        return _guichan.IntVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _guichan.IntVector_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _guichan.IntVector_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _guichan.IntVector_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _guichan.IntVector_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _guichan.IntVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _guichan.IntVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _guichan.IntVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> IntVector
        __init__(self, IntVector ?) -> IntVector
        __init__(self, size_type size) -> IntVector
        __init__(self, size_type size, value_type value) -> IntVector
        """
        this = _guichan.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _guichan.IntVector_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _guichan.IntVector_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _guichan.IntVector_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _guichan.IntVector_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _guichan.IntVector_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _guichan.IntVector_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _guichan.IntVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _guichan.IntVector_capacity(*args)

    __swig_destroy__ = _guichan.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _guichan.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    """Proxy of C++ FloatVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _guichan.FloatVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _guichan.FloatVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _guichan.FloatVector___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _guichan.FloatVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> FloatVector"""
        return _guichan.FloatVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, FloatVector v)"""
        return _guichan.FloatVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _guichan.FloatVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _guichan.FloatVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _guichan.FloatVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _guichan.FloatVector___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _guichan.FloatVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _guichan.FloatVector_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _guichan.FloatVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _guichan.FloatVector_clear(*args)

    def swap(*args):
        """swap(self, FloatVector v)"""
        return _guichan.FloatVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _guichan.FloatVector_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _guichan.FloatVector_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _guichan.FloatVector_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _guichan.FloatVector_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _guichan.FloatVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _guichan.FloatVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _guichan.FloatVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> FloatVector
        __init__(self, FloatVector ?) -> FloatVector
        __init__(self, size_type size) -> FloatVector
        __init__(self, size_type size, value_type value) -> FloatVector
        """
        this = _guichan.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _guichan.FloatVector_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _guichan.FloatVector_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _guichan.FloatVector_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _guichan.FloatVector_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _guichan.FloatVector_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _guichan.FloatVector_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _guichan.FloatVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _guichan.FloatVector_capacity(*args)

    __swig_destroy__ = _guichan.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _guichan.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    """Proxy of C++ DoubleVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _guichan.DoubleVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _guichan.DoubleVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _guichan.DoubleVector___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _guichan.DoubleVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> DoubleVector"""
        return _guichan.DoubleVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, DoubleVector v)"""
        return _guichan.DoubleVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _guichan.DoubleVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _guichan.DoubleVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _guichan.DoubleVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _guichan.DoubleVector___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _guichan.DoubleVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _guichan.DoubleVector_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _guichan.DoubleVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _guichan.DoubleVector_clear(*args)

    def swap(*args):
        """swap(self, DoubleVector v)"""
        return _guichan.DoubleVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _guichan.DoubleVector_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _guichan.DoubleVector_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _guichan.DoubleVector_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _guichan.DoubleVector_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _guichan.DoubleVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _guichan.DoubleVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _guichan.DoubleVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> DoubleVector
        __init__(self, DoubleVector ?) -> DoubleVector
        __init__(self, size_type size) -> DoubleVector
        __init__(self, size_type size, value_type value) -> DoubleVector
        """
        this = _guichan.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _guichan.DoubleVector_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _guichan.DoubleVector_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _guichan.DoubleVector_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _guichan.DoubleVector_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _guichan.DoubleVector_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _guichan.DoubleVector_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _guichan.DoubleVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _guichan.DoubleVector_capacity(*args)

    __swig_destroy__ = _guichan.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _guichan.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class BoolVector(_object):
    """Proxy of C++ BoolVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _guichan.BoolVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _guichan.BoolVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _guichan.BoolVector___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _guichan.BoolVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> BoolVector"""
        return _guichan.BoolVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, BoolVector v)"""
        return _guichan.BoolVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _guichan.BoolVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _guichan.BoolVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _guichan.BoolVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _guichan.BoolVector___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _guichan.BoolVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _guichan.BoolVector_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _guichan.BoolVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _guichan.BoolVector_clear(*args)

    def swap(*args):
        """swap(self, BoolVector v)"""
        return _guichan.BoolVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _guichan.BoolVector_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _guichan.BoolVector_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _guichan.BoolVector_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _guichan.BoolVector_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _guichan.BoolVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _guichan.BoolVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _guichan.BoolVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> BoolVector
        __init__(self, BoolVector ?) -> BoolVector
        __init__(self, size_type size) -> BoolVector
        __init__(self, size_type size, value_type value) -> BoolVector
        """
        this = _guichan.new_BoolVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _guichan.BoolVector_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _guichan.BoolVector_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _guichan.BoolVector_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _guichan.BoolVector_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _guichan.BoolVector_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _guichan.BoolVector_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _guichan.BoolVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _guichan.BoolVector_capacity(*args)

    __swig_destroy__ = _guichan.delete_BoolVector
    __del__ = lambda self : None;
BoolVector_swigregister = _guichan.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class UintUintPair(_object):
    """Proxy of C++ UintUintPair class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UintUintPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UintUintPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UintUintPair
        __init__(self, unsigned int first, unsigned int second) -> UintUintPair
        __init__(self, UintUintPair p) -> UintUintPair
        """
        this = _guichan.new_UintUintPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _guichan.UintUintPair_first_set
    __swig_getmethods__["first"] = _guichan.UintUintPair_first_get
    if _newclass:first = _swig_property(_guichan.UintUintPair_first_get, _guichan.UintUintPair_first_set)
    __swig_setmethods__["second"] = _guichan.UintUintPair_second_set
    __swig_getmethods__["second"] = _guichan.UintUintPair_second_get
    if _newclass:second = _swig_property(_guichan.UintUintPair_second_get, _guichan.UintUintPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _guichan.delete_UintUintPair
    __del__ = lambda self : None;
UintUintPair_swigregister = _guichan.UintUintPair_swigregister
UintUintPair_swigregister(UintUintPair)

class UintUintPairVector(_object):
    """Proxy of C++ UintUintPairVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UintUintPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UintUintPairVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _guichan.UintUintPairVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _guichan.UintUintPairVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _guichan.UintUintPairVector___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _guichan.UintUintPairVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> UintUintPairVector"""
        return _guichan.UintUintPairVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, UintUintPairVector v)"""
        return _guichan.UintUintPairVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _guichan.UintUintPairVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _guichan.UintUintPairVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _guichan.UintUintPairVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _guichan.UintUintPairVector___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _guichan.UintUintPairVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _guichan.UintUintPairVector_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _guichan.UintUintPairVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _guichan.UintUintPairVector_clear(*args)

    def swap(*args):
        """swap(self, UintUintPairVector v)"""
        return _guichan.UintUintPairVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _guichan.UintUintPairVector_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _guichan.UintUintPairVector_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _guichan.UintUintPairVector_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _guichan.UintUintPairVector_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _guichan.UintUintPairVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _guichan.UintUintPairVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _guichan.UintUintPairVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> UintUintPairVector
        __init__(self, UintUintPairVector ?) -> UintUintPairVector
        __init__(self, size_type size) -> UintUintPairVector
        __init__(self, size_type size, value_type value) -> UintUintPairVector
        """
        this = _guichan.new_UintUintPairVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _guichan.UintUintPairVector_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _guichan.UintUintPairVector_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _guichan.UintUintPairVector_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _guichan.UintUintPairVector_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _guichan.UintUintPairVector_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _guichan.UintUintPairVector_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _guichan.UintUintPairVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _guichan.UintUintPairVector_capacity(*args)

    __swig_destroy__ = _guichan.delete_UintUintPairVector
    __del__ = lambda self : None;
UintUintPairVector_swigregister = _guichan.UintUintPairVector_swigregister
UintUintPairVector_swigregister(UintUintPairVector)

class Rectangle(_object):
    """Proxy of C++ Rectangle class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rectangle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Rectangle
        __init__(self, int x, int y, int width, int height) -> Rectangle
        """
        this = _guichan.new_Rectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    def setAll(*args):
        """setAll(self, int x, int y, int width, int height)"""
        return _guichan.Rectangle_setAll(*args)

    def isIntersecting(*args):
        """isIntersecting(self, Rectangle rectangle) -> bool"""
        return _guichan.Rectangle_isIntersecting(*args)

    def isContaining(*args):
        """
        isContaining(self, int x, int y) -> bool
        isContaining(self, Rectangle other) -> bool
        """
        return _guichan.Rectangle_isContaining(*args)

    def isEmpty(*args):
        """isEmpty(self) -> bool"""
        return _guichan.Rectangle_isEmpty(*args)

    def __add__(*args):
        """__add__(self, Rectangle rh) -> Rectangle"""
        return _guichan.Rectangle___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, Rectangle rh) -> Rectangle"""
        return _guichan.Rectangle___iadd__(*args)

    def intersection(*args):
        """intersection(self, Rectangle rh) -> Rectangle"""
        return _guichan.Rectangle_intersection(*args)

    __swig_setmethods__["x"] = _guichan.Rectangle_x_set
    __swig_getmethods__["x"] = _guichan.Rectangle_x_get
    if _newclass:x = _swig_property(_guichan.Rectangle_x_get, _guichan.Rectangle_x_set)
    __swig_setmethods__["y"] = _guichan.Rectangle_y_set
    __swig_getmethods__["y"] = _guichan.Rectangle_y_get
    if _newclass:y = _swig_property(_guichan.Rectangle_y_get, _guichan.Rectangle_y_set)
    __swig_setmethods__["width"] = _guichan.Rectangle_width_set
    __swig_getmethods__["width"] = _guichan.Rectangle_width_get
    if _newclass:width = _swig_property(_guichan.Rectangle_width_get, _guichan.Rectangle_width_set)
    __swig_setmethods__["height"] = _guichan.Rectangle_height_set
    __swig_getmethods__["height"] = _guichan.Rectangle_height_get
    if _newclass:height = _swig_property(_guichan.Rectangle_height_get, _guichan.Rectangle_height_set)
    __swig_destroy__ = _guichan.delete_Rectangle
    __del__ = lambda self : None;
Rectangle_swigregister = _guichan.Rectangle_swigregister
Rectangle_swigregister(Rectangle)

class ClipRectangle(Rectangle):
    """Proxy of C++ ClipRectangle class"""
    __swig_setmethods__ = {}
    for _s in [Rectangle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClipRectangle, name, value)
    __swig_getmethods__ = {}
    for _s in [Rectangle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClipRectangle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ClipRectangle
        __init__(self, int x, int y, int width, int height, int xOffset, int yOffset) -> ClipRectangle
        """
        this = _guichan.new_ClipRectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["xOffset"] = _guichan.ClipRectangle_xOffset_set
    __swig_getmethods__["xOffset"] = _guichan.ClipRectangle_xOffset_get
    if _newclass:xOffset = _swig_property(_guichan.ClipRectangle_xOffset_get, _guichan.ClipRectangle_xOffset_set)
    __swig_setmethods__["yOffset"] = _guichan.ClipRectangle_yOffset_set
    __swig_getmethods__["yOffset"] = _guichan.ClipRectangle_yOffset_get
    if _newclass:yOffset = _swig_property(_guichan.ClipRectangle_yOffset_get, _guichan.ClipRectangle_yOffset_set)
    __swig_destroy__ = _guichan.delete_ClipRectangle
    __del__ = lambda self : None;
ClipRectangle_swigregister = _guichan.ClipRectangle_swigregister
ClipRectangle_swigregister(ClipRectangle)

class Color(_object):
    """Proxy of C++ Color class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Color
        __init__(self, int color) -> Color
        __init__(self, int r, int g, int b, int a=255) -> Color
        __init__(self, int r, int g, int b) -> Color
        """
        this = _guichan.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(*args):
        """__add__(self, Color color) -> Color"""
        return _guichan.Color___add__(*args)

    def __sub__(*args):
        """__sub__(self, Color color) -> Color"""
        return _guichan.Color___sub__(*args)

    def __mul__(*args):
        """__mul__(self, float value) -> Color"""
        return _guichan.Color___mul__(*args)

    def __eq__(*args):
        """__eq__(self, Color color) -> bool"""
        return _guichan.Color___eq__(*args)

    def __ne__(*args):
        """__ne__(self, Color color) -> bool"""
        return _guichan.Color___ne__(*args)

    __swig_setmethods__["r"] = _guichan.Color_r_set
    __swig_getmethods__["r"] = _guichan.Color_r_get
    if _newclass:r = _swig_property(_guichan.Color_r_get, _guichan.Color_r_set)
    __swig_setmethods__["g"] = _guichan.Color_g_set
    __swig_getmethods__["g"] = _guichan.Color_g_get
    if _newclass:g = _swig_property(_guichan.Color_g_get, _guichan.Color_g_set)
    __swig_setmethods__["b"] = _guichan.Color_b_set
    __swig_getmethods__["b"] = _guichan.Color_b_get
    if _newclass:b = _swig_property(_guichan.Color_b_get, _guichan.Color_b_set)
    __swig_setmethods__["a"] = _guichan.Color_a_set
    __swig_getmethods__["a"] = _guichan.Color_a_get
    if _newclass:a = _swig_property(_guichan.Color_a_get, _guichan.Color_a_set)
    __swig_destroy__ = _guichan.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _guichan.Color_swigregister
Color_swigregister(Color)

class Event(_object):
    """Proxy of C++ Event class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Widget source) -> Event"""
        this = _guichan.new_Event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _guichan.delete_Event
    __del__ = lambda self : None;
    def getSource(*args):
        """getSource(self) -> Widget"""
        return _guichan.Event_getSource(*args)

Event_swigregister = _guichan.Event_swigregister
Event_swigregister(Event)

class Graphics(_object):
    """Proxy of C++ Graphics class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graphics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graphics, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    Left = _guichan.Graphics_Left
    Center = _guichan.Graphics_Center
    Right = _guichan.Graphics_Right
    __swig_destroy__ = _guichan.delete_Graphics
    __del__ = lambda self : None;
    def _beginDraw(*args):
        """_beginDraw(self)"""
        return _guichan.Graphics__beginDraw(*args)

    def _endDraw(*args):
        """_endDraw(self)"""
        return _guichan.Graphics__endDraw(*args)

    def pushClipArea(*args):
        """pushClipArea(self, Rectangle area) -> bool"""
        return _guichan.Graphics_pushClipArea(*args)

    def popClipArea(*args):
        """popClipArea(self)"""
        return _guichan.Graphics_popClipArea(*args)

    def getCurrentClipArea(*args):
        """getCurrentClipArea(self) -> ClipRectangle"""
        return _guichan.Graphics_getCurrentClipArea(*args)

    def drawImage(*args):
        """
        drawImage(self, Image image, int srcX, int srcY, int dstX, int dstY, 
            int width, int height)
        drawImage(self, Image image, int dstX, int dstY)
        """
        return _guichan.Graphics_drawImage(*args)

    def drawPoint(*args):
        """drawPoint(self, int x, int y)"""
        return _guichan.Graphics_drawPoint(*args)

    def drawLine(*args):
        """drawLine(self, int x1, int y1, int x2, int y2)"""
        return _guichan.Graphics_drawLine(*args)

    def drawRectangle(*args):
        """drawRectangle(self, Rectangle rectangle)"""
        return _guichan.Graphics_drawRectangle(*args)

    def fillRectangle(*args):
        """fillRectangle(self, Rectangle rectangle)"""
        return _guichan.Graphics_fillRectangle(*args)

    def setColor(*args):
        """setColor(self, Color color)"""
        return _guichan.Graphics_setColor(*args)

    def getColor(*args):
        """getColor(self) -> Color"""
        return _guichan.Graphics_getColor(*args)

    def setFont(*args):
        """setFont(self, Font font)"""
        return _guichan.Graphics_setFont(*args)

    def drawText(*args):
        """
        drawText(self, string text, int x, int y, Alignment alignment=Left)
        drawText(self, string text, int x, int y)
        """
        return _guichan.Graphics_drawText(*args)

Graphics_swigregister = _guichan.Graphics_swigregister
Graphics_swigregister(Graphics)

class Gui(_object):
    """Proxy of C++ Gui class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gui, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Gui"""
        this = _guichan.new_Gui(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _guichan.delete_Gui
    __del__ = lambda self : None;
    def setTop(*args):
        """setTop(self, Widget top)"""
        return _guichan.Gui_setTop(*args)

    def getTop(*args):
        """getTop(self) -> Widget"""
        return _guichan.Gui_getTop(*args)

    def setGraphics(*args):
        """setGraphics(self, Graphics graphics)"""
        return _guichan.Gui_setGraphics(*args)

    def getGraphics(*args):
        """getGraphics(self) -> Graphics"""
        return _guichan.Gui_getGraphics(*args)

    def setInput(*args):
        """setInput(self, Input input)"""
        return _guichan.Gui_setInput(*args)

    def getInput(*args):
        """getInput(self) -> Input"""
        return _guichan.Gui_getInput(*args)

    def logic(*args):
        """logic(self)"""
        return _guichan.Gui_logic(*args)

    def draw(*args):
        """draw(self)"""
        return _guichan.Gui_draw(*args)

    def focusNone(*args):
        """focusNone(self)"""
        return _guichan.Gui_focusNone(*args)

    def setTabbingEnabled(*args):
        """setTabbingEnabled(self, bool tabbing)"""
        return _guichan.Gui_setTabbingEnabled(*args)

    def isTabbingEnabled(*args):
        """isTabbingEnabled(self) -> bool"""
        return _guichan.Gui_isTabbingEnabled(*args)

    def addGlobalKeyListener(*args):
        """addGlobalKeyListener(self, KeyListener keyListener)"""
        return _guichan.Gui_addGlobalKeyListener(*args)

    def removeGlobalKeyListener(*args):
        """removeGlobalKeyListener(self, KeyListener keyListener)"""
        return _guichan.Gui_removeGlobalKeyListener(*args)

Gui_swigregister = _guichan.Gui_swigregister
Gui_swigregister(Gui)

class Input(_object):
    """Proxy of C++ Input class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Input, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _guichan.delete_Input
    __del__ = lambda self : None;
    def isKeyQueueEmpty(*args):
        """isKeyQueueEmpty(self) -> bool"""
        return _guichan.Input_isKeyQueueEmpty(*args)

    def dequeueKeyInput(*args):
        """dequeueKeyInput(self) -> KeyInput"""
        return _guichan.Input_dequeueKeyInput(*args)

    def isMouseQueueEmpty(*args):
        """isMouseQueueEmpty(self) -> bool"""
        return _guichan.Input_isMouseQueueEmpty(*args)

    def dequeueMouseInput(*args):
        """dequeueMouseInput(self) -> MouseInput"""
        return _guichan.Input_dequeueMouseInput(*args)

    def _pollInput(*args):
        """_pollInput(self)"""
        return _guichan.Input__pollInput(*args)

Input_swigregister = _guichan.Input_swigregister
Input_swigregister(Input)

class InputEvent(Event):
    """Proxy of C++ InputEvent class"""
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Widget source, Widget distributor, bool isShiftPressed, 
            bool isControlPressed, bool isAltPressed, 
            bool isMetaPressed) -> InputEvent
        """
        this = _guichan.new_InputEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def isShiftPressed(*args):
        """isShiftPressed(self) -> bool"""
        return _guichan.InputEvent_isShiftPressed(*args)

    def isControlPressed(*args):
        """isControlPressed(self) -> bool"""
        return _guichan.InputEvent_isControlPressed(*args)

    def isAltPressed(*args):
        """isAltPressed(self) -> bool"""
        return _guichan.InputEvent_isAltPressed(*args)

    def isMetaPressed(*args):
        """isMetaPressed(self) -> bool"""
        return _guichan.InputEvent_isMetaPressed(*args)

    def consume(*args):
        """consume(self)"""
        return _guichan.InputEvent_consume(*args)

    def isConsumed(*args):
        """isConsumed(self) -> bool"""
        return _guichan.InputEvent_isConsumed(*args)

    def getDistributor(*args):
        """getDistributor(self) -> Widget"""
        return _guichan.InputEvent_getDistributor(*args)

    __swig_destroy__ = _guichan.delete_InputEvent
    __del__ = lambda self : None;
InputEvent_swigregister = _guichan.InputEvent_swigregister
InputEvent_swigregister(InputEvent)

class Key(_object):
    """Proxy of C++ Key class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Key, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int value=0) -> Key
        __init__(self) -> Key
        """
        this = _guichan.new_Key(*args)
        try: self.this.append(this)
        except: self.this = this
    def isCharacter(*args):
        """isCharacter(self) -> bool"""
        return _guichan.Key_isCharacter(*args)

    def isNumber(*args):
        """isNumber(self) -> bool"""
        return _guichan.Key_isNumber(*args)

    def isLetter(*args):
        """isLetter(self) -> bool"""
        return _guichan.Key_isLetter(*args)

    def getValue(*args):
        """getValue(self) -> int"""
        return _guichan.Key_getValue(*args)

    def __eq__(*args):
        """__eq__(self, Key key) -> bool"""
        return _guichan.Key___eq__(*args)

    def __ne__(*args):
        """__ne__(self, Key key) -> bool"""
        return _guichan.Key___ne__(*args)

    Space = _guichan.Key_Space
    Tab = _guichan.Key_Tab
    Enter = _guichan.Key_Enter
    LeftAlt = _guichan.Key_LeftAlt
    RightAlt = _guichan.Key_RightAlt
    LeftShift = _guichan.Key_LeftShift
    RightShift = _guichan.Key_RightShift
    LeftControl = _guichan.Key_LeftControl
    RightControl = _guichan.Key_RightControl
    LeftMeta = _guichan.Key_LeftMeta
    RightMeta = _guichan.Key_RightMeta
    LeftSuper = _guichan.Key_LeftSuper
    RightSuper = _guichan.Key_RightSuper
    Insert = _guichan.Key_Insert
    Home = _guichan.Key_Home
    PageUp = _guichan.Key_PageUp
    Delete = _guichan.Key_Delete
    End = _guichan.Key_End
    PageDown = _guichan.Key_PageDown
    Escape = _guichan.Key_Escape
    CapsLock = _guichan.Key_CapsLock
    Backspace = _guichan.Key_Backspace
    F1 = _guichan.Key_F1
    F2 = _guichan.Key_F2
    F3 = _guichan.Key_F3
    F4 = _guichan.Key_F4
    F5 = _guichan.Key_F5
    F6 = _guichan.Key_F6
    F7 = _guichan.Key_F7
    F8 = _guichan.Key_F8
    F9 = _guichan.Key_F9
    F10 = _guichan.Key_F10
    F11 = _guichan.Key_F11
    F12 = _guichan.Key_F12
    F13 = _guichan.Key_F13
    F14 = _guichan.Key_F14
    F15 = _guichan.Key_F15
    PrintScreen = _guichan.Key_PrintScreen
    ScrollLock = _guichan.Key_ScrollLock
    Pause = _guichan.Key_Pause
    NumLock = _guichan.Key_NumLock
    AltGr = _guichan.Key_AltGr
    Left = _guichan.Key_Left
    Right = _guichan.Key_Right
    Up = _guichan.Key_Up
    Down = _guichan.Key_Down
    __swig_destroy__ = _guichan.delete_Key
    __del__ = lambda self : None;
Key_swigregister = _guichan.Key_swigregister
Key_swigregister(Key)

class KeyEvent(InputEvent):
    """Proxy of C++ KeyEvent class"""
    __swig_setmethods__ = {}
    for _s in [InputEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [InputEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyEvent, name)
    __repr__ = _swig_repr
    Pressed = _guichan.KeyEvent_Pressed
    Released = _guichan.KeyEvent_Released
    def __init__(self, *args): 
        """
        __init__(self, Widget source, Widget distributor, bool isShiftPressed, 
            bool isControlPressed, bool isAltPressed, 
            bool isMetaPressed, unsigned int type, bool isNumericPad, 
            Key key) -> KeyEvent
        """
        this = _guichan.new_KeyEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _guichan.delete_KeyEvent
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> unsigned int"""
        return _guichan.KeyEvent_getType(*args)

    def isNumericPad(*args):
        """isNumericPad(self) -> bool"""
        return _guichan.KeyEvent_isNumericPad(*args)

    def getKey(*args):
        """getKey(self) -> Key"""
        return _guichan.KeyEvent_getKey(*args)

KeyEvent_swigregister = _guichan.KeyEvent_swigregister
KeyEvent_swigregister(KeyEvent)

class KeyListener(_object):
    """Proxy of C++ KeyListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyListener, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _guichan.delete_KeyListener
    __del__ = lambda self : None;
    def keyPressed(*args):
        """keyPressed(self, KeyEvent keyEvent)"""
        return _guichan.KeyListener_keyPressed(*args)

    def keyReleased(*args):
        """keyReleased(self, KeyEvent keyEvent)"""
        return _guichan.KeyListener_keyReleased(*args)

KeyListener_swigregister = _guichan.KeyListener_swigregister
KeyListener_swigregister(KeyListener)

class ListModel(_object):
    """Proxy of C++ ListModel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListModel, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _guichan.delete_ListModel
    __del__ = lambda self : None;
    def getNumberOfElements(*args):
        """getNumberOfElements(self) -> int"""
        return _guichan.ListModel_getNumberOfElements(*args)

    def getElementAt(*args):
        """getElementAt(self, int i) -> string"""
        return _guichan.ListModel_getElementAt(*args)

ListModel_swigregister = _guichan.ListModel_swigregister
ListModel_swigregister(ListModel)

class MouseEvent(InputEvent):
    """Proxy of C++ MouseEvent class"""
    __swig_setmethods__ = {}
    for _s in [InputEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [InputEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MouseEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Widget source, Widget distributor, bool isShiftPressed, 
            bool isControlPressed, bool isAltPressed, 
            bool isMetaPressed, unsigned int type, unsigned int button, 
            int x, int y, int clickCount) -> MouseEvent
        """
        this = _guichan.new_MouseEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def getButton(*args):
        """getButton(self) -> unsigned int"""
        return _guichan.MouseEvent_getButton(*args)

    def getX(*args):
        """getX(self) -> int"""
        return _guichan.MouseEvent_getX(*args)

    def getY(*args):
        """getY(self) -> int"""
        return _guichan.MouseEvent_getY(*args)

    def getClickCount(*args):
        """getClickCount(self) -> int"""
        return _guichan.MouseEvent_getClickCount(*args)

    def getType(*args):
        """getType(self) -> unsigned int"""
        return _guichan.MouseEvent_getType(*args)

    Moved = _guichan.MouseEvent_Moved
    Pressed = _guichan.MouseEvent_Pressed
    Released = _guichan.MouseEvent_Released
    WheelMovedDown = _guichan.MouseEvent_WheelMovedDown
    WheelMovedUp = _guichan.MouseEvent_WheelMovedUp
    Clicked = _guichan.MouseEvent_Clicked
    Entered = _guichan.MouseEvent_Entered
    Exited = _guichan.MouseEvent_Exited
    Dragged = _guichan.MouseEvent_Dragged
    Empty = _guichan.MouseEvent_Empty
    Left = _guichan.MouseEvent_Left
    Right = _guichan.MouseEvent_Right
    Middle = _guichan.MouseEvent_Middle
    __swig_destroy__ = _guichan.delete_MouseEvent
    __del__ = lambda self : None;
MouseEvent_swigregister = _guichan.MouseEvent_swigregister
MouseEvent_swigregister(MouseEvent)

class MouseListener(_object):
    """Proxy of C++ MouseListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MouseListener, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _guichan.delete_MouseListener
    __del__ = lambda self : None;
    def mouseEntered(*args):
        """mouseEntered(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mouseEntered(*args)

    def mouseExited(*args):
        """mouseExited(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mouseExited(*args)

    def mousePressed(*args):
        """mousePressed(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mousePressed(*args)

    def mouseReleased(*args):
        """mouseReleased(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mouseReleased(*args)

    def mouseClicked(*args):
        """mouseClicked(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mouseClicked(*args)

    def mouseWheelMovedUp(*args):
        """mouseWheelMovedUp(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mouseWheelMovedUp(*args)

    def mouseWheelMovedDown(*args):
        """mouseWheelMovedDown(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mouseWheelMovedDown(*args)

    def mouseMoved(*args):
        """mouseMoved(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mouseMoved(*args)

    def mouseDragged(*args):
        """mouseDragged(self, MouseEvent mouseEvent)"""
        return _guichan.MouseListener_mouseDragged(*args)

MouseListener_swigregister = _guichan.MouseListener_swigregister
MouseListener_swigregister(MouseListener)

class Widget(_object):
    """Proxy of C++ Widget class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Widget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Widget, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _guichan.delete_Widget
    __del__ = lambda self : None;
    def draw(*args):
        """draw(self, Graphics graphics)"""
        return _guichan.Widget_draw(*args)

    def drawFrame(*args):
        """drawFrame(self, Graphics graphics)"""
        return _guichan.Widget_drawFrame(*args)

    def setFrameSize(*args):
        """setFrameSize(self, unsigned int frameSize)"""
        return _guichan.Widget_setFrameSize(*args)

    def getFrameSize(*args):
        """getFrameSize(self) -> unsigned int"""
        return _guichan.Widget_getFrameSize(*args)

    def logic(*args):
        """logic(self)"""
        return _guichan.Widget_logic(*args)

    def getParent(*args):
        """getParent(self) -> Widget"""
        return _guichan.Widget_getParent(*args)

    def getTop(*args):
        """getTop(self) -> Widget"""
        return _guichan.Widget_getTop(*args)

    def setWidth(*args):
        """setWidth(self, int width)"""
        return _guichan.Widget_setWidth(*args)

    def getWidth(*args):
        """getWidth(self) -> int"""
        return _guichan.Widget_getWidth(*args)

    def setHeight(*args):
        """setHeight(self, int height)"""
        return _guichan.Widget_setHeight(*args)

    def getHeight(*args):
        """getHeight(self) -> int"""
        return _guichan.Widget_getHeight(*args)

    def setSize(*args):
        """setSize(self, int width, int height)"""
        return _guichan.Widget_setSize(*args)

    def setX(*args):
        """setX(self, int x)"""
        return _guichan.Widget_setX(*args)

    def getX(*args):
        """getX(self) -> int"""
        return _guichan.Widget_getX(*args)

    def setY(*args):
        """setY(self, int y)"""
        return _guichan.Widget_setY(*args)

    def getY(*args):
        """getY(self) -> int"""
        return _guichan.Widget_getY(*args)

    def setPosition(*args):
        """setPosition(self, int x, int y)"""
        return _guichan.Widget_setPosition(*args)

    def setDimension(*args):
        """setDimension(self, Rectangle dimension)"""
        return _guichan.Widget_setDimension(*args)

    def getDimension(*args):
        """getDimension(self) -> Rectangle"""
        return _guichan.Widget_getDimension(*args)

    def setFocusable(*args):
        """setFocusable(self, bool focusable)"""
        return _guichan.Widget_setFocusable(*args)

    def isFocusable(*args):
        """isFocusable(self) -> bool"""
        return _guichan.Widget_isFocusable(*args)

    def isFocused(*args):
        """isFocused(self) -> bool"""
        return _guichan.Widget_isFocused(*args)

    def setEnabled(*args):
        """setEnabled(self, bool enabled)"""
        return _guichan.Widget_setEnabled(*args)

    def isEnabled(*args):
        """isEnabled(self) -> bool"""
        return _guichan.Widget_isEnabled(*args)

    def setVisible(*args):
        """setVisible(self, bool visible)"""
        return _guichan.Widget_setVisible(*args)

    def isVisible(*args):
        """isVisible(self) -> bool"""
        return _guichan.Widget_isVisible(*args)

    def setBaseColor(*args):
        """setBaseColor(self, Color color)"""
        return _guichan.Widget_setBaseColor(*args)

    def getBaseColor(*args):
        """getBaseColor(self) -> Color"""
        return _guichan.Widget_getBaseColor(*args)

    def setForegroundColor(*args):
        """setForegroundColor(self, Color color)"""
        return _guichan.Widget_setForegroundColor(*args)

    def getForegroundColor(*args):
        """getForegroundColor(self) -> Color"""
        return _guichan.Widget_getForegroundColor(*args)

    def setBackgroundColor(*args):
        """setBackgroundColor(self, Color color)"""
        return _guichan.Widget_setBackgroundColor(*args)

    def getBackgroundColor(*args):
        """getBackgroundColor(self) -> Color"""
        return _guichan.Widget_getBackgroundColor(*args)

    def setSelectionColor(*args):
        """setSelectionColor(self, Color color)"""
        return _guichan.Widget_setSelectionColor(*args)

    def getSelectionColor(*args):
        """getSelectionColor(self) -> Color"""
        return _guichan.Widget_getSelectionColor(*args)

    def requestFocus(*args):
        """requestFocus(self)"""
        return _guichan.Widget_requestFocus(*args)

    def requestMoveToTop(*args):
        """requestMoveToTop(self)"""
        return _guichan.Widget_requestMoveToTop(*args)

    def requestMoveToBottom(*args):
        """requestMoveToBottom(self)"""
        return _guichan.Widget_requestMoveToBottom(*args)

    def _draw(*args):
        """_draw(self, Graphics graphics)"""
        return _guichan.Widget__draw(*args)

    def _logic(*args):
        """_logic(self)"""
        return _guichan.Widget__logic(*args)

    def _setFocusHandler(*args):
        """_setFocusHandler(self, FocusHandler focusHandler)"""
        return _guichan.Widget__setFocusHandler(*args)

    def _getFocusHandler(*args):
        """_getFocusHandler(self) -> FocusHandler"""
        return _guichan.Widget__getFocusHandler(*args)

    def addActionListener(*args):
        """addActionListener(self, ActionListener actionListener)"""
        return _guichan.Widget_addActionListener(*args)

    def removeActionListener(*args):
        """removeActionListener(self, ActionListener actionListener)"""
        return _guichan.Widget_removeActionListener(*args)

    def addDeathListener(*args):
        """addDeathListener(self, DeathListener deathListener)"""
        return _guichan.Widget_addDeathListener(*args)

    def removeDeathListener(*args):
        """removeDeathListener(self, DeathListener deathListener)"""
        return _guichan.Widget_removeDeathListener(*args)

    def addMouseListener(*args):
        """addMouseListener(self, MouseListener mouseListener)"""
        return _guichan.Widget_addMouseListener(*args)

    def removeMouseListener(*args):
        """removeMouseListener(self, MouseListener mouseListener)"""
        return _guichan.Widget_removeMouseListener(*args)

    def addKeyListener(*args):
        """addKeyListener(self, KeyListener keyListener)"""
        return _guichan.Widget_addKeyListener(*args)

    def removeKeyListener(*args):
        """removeKeyListener(self, KeyListener keyListener)"""
        return _guichan.Widget_removeKeyListener(*args)

    def addFocusListener(*args):
        """addFocusListener(self, FocusListener focusListener)"""
        return _guichan.Widget_addFocusListener(*args)

    def removeFocusListener(*args):
        """removeFocusListener(self, FocusListener focusListener)"""
        return _guichan.Widget_removeFocusListener(*args)

    def addWidgetListener(*args):
        """addWidgetListener(self, WidgetListener widgetListener)"""
        return _guichan.Widget_addWidgetListener(*args)

    def removeWidgetListener(*args):
        """removeWidgetListener(self, WidgetListener widgetListener)"""
        return _guichan.Widget_removeWidgetListener(*args)

    def setActionEventId(*args):
        """setActionEventId(self, string actionEventId)"""
        return _guichan.Widget_setActionEventId(*args)

    def getActionEventId(*args):
        """getActionEventId(self) -> string"""
        return _guichan.Widget_getActionEventId(*args)

    def getAbsolutePosition(*args):
        """getAbsolutePosition(self, int x, int y)"""
        return _guichan.Widget_getAbsolutePosition(*args)

    def _setParent(*args):
        """_setParent(self, Widget parent)"""
        return _guichan.Widget__setParent(*args)

    def getFont(*args):
        """getFont(self) -> Font"""
        return _guichan.Widget_getFont(*args)

    def setGlobalFont(*args):
        """setGlobalFont(Font font)"""
        return _guichan.Widget_setGlobalFont(*args)

    if _newclass:setGlobalFont = staticmethod(setGlobalFont)
    __swig_getmethods__["setGlobalFont"] = lambda x: setGlobalFont
    def setFont(*args):
        """setFont(self, Font font)"""
        return _guichan.Widget_setFont(*args)

    def fontChanged(*args):
        """fontChanged(self)"""
        return _guichan.Widget_fontChanged(*args)

    def widgetExists(*args):
        """widgetExists(Widget widget) -> bool"""
        return _guichan.Widget_widgetExists(*args)

    if _newclass:widgetExists = staticmethod(widgetExists)
    __swig_getmethods__["widgetExists"] = lambda x: widgetExists
    def isTabInEnabled(*args):
        """isTabInEnabled(self) -> bool"""
        return _guichan.Widget_isTabInEnabled(*args)

    def setTabInEnabled(*args):
        """setTabInEnabled(self, bool enabled)"""
        return _guichan.Widget_setTabInEnabled(*args)

    def isTabOutEnabled(*args):
        """isTabOutEnabled(self) -> bool"""
        return _guichan.Widget_isTabOutEnabled(*args)

    def setTabOutEnabled(*args):
        """setTabOutEnabled(self, bool enabled)"""
        return _guichan.Widget_setTabOutEnabled(*args)

    def requestModalFocus(*args):
        """requestModalFocus(self)"""
        return _guichan.Widget_requestModalFocus(*args)

    def requestModalMouseInputFocus(*args):
        """requestModalMouseInputFocus(self)"""
        return _guichan.Widget_requestModalMouseInputFocus(*args)

    def releaseModalFocus(*args):
        """releaseModalFocus(self)"""
        return _guichan.Widget_releaseModalFocus(*args)

    def releaseModalMouseInputFocus(*args):
        """releaseModalMouseInputFocus(self)"""
        return _guichan.Widget_releaseModalMouseInputFocus(*args)

    def isModalFocused(*args):
        """isModalFocused(self) -> bool"""
        return _guichan.Widget_isModalFocused(*args)

    def isModalMouseInputFocused(*args):
        """isModalMouseInputFocused(self) -> bool"""
        return _guichan.Widget_isModalMouseInputFocused(*args)

    def getWidgetAt(*args):
        """getWidgetAt(self, int x, int y) -> Widget"""
        return _guichan.Widget_getWidgetAt(*args)

    def getWidgetsIn(*args):
        """
        getWidgetsIn(self, Rectangle area, Widget ignore=None) -> std::list<(p.gcn::Widget,std::allocator<(p.gcn::Widget)>)>
        getWidgetsIn(self, Rectangle area) -> std::list<(p.gcn::Widget,std::allocator<(p.gcn::Widget)>)>
        """
        return _guichan.Widget_getWidgetsIn(*args)

    def _getMouseListeners(*args):
        """_getMouseListeners(self) -> std::list<(p.gcn::MouseListener,std::allocator<(p.gcn::MouseListener)>)>"""
        return _guichan.Widget__getMouseListeners(*args)

    def _getKeyListeners(*args):
        """_getKeyListeners(self) -> std::list<(p.gcn::KeyListener,std::allocator<(p.gcn::KeyListener)>)>"""
        return _guichan.Widget__getKeyListeners(*args)

    def _getFocusListeners(*args):
        """_getFocusListeners(self) -> std::list<(p.gcn::FocusListener,std::allocator<(p.gcn::FocusListener)>)>"""
        return _guichan.Widget__getFocusListeners(*args)

    def getChildrenArea(*args):
        """getChildrenArea(self) -> Rectangle"""
        return _guichan.Widget_getChildrenArea(*args)

    def _getInternalFocusHandler(*args):
        """_getInternalFocusHandler(self) -> FocusHandler"""
        return _guichan.Widget__getInternalFocusHandler(*args)

    def setInternalFocusHandler(*args):
        """setInternalFocusHandler(self, FocusHandler internalFocusHandler)"""
        return _guichan.Widget_setInternalFocusHandler(*args)

    def moveToTop(*args):
        """moveToTop(self, Widget widget)"""
        return _guichan.Widget_moveToTop(*args)

    def moveToBottom(*args):
        """moveToBottom(self, Widget widget)"""
        return _guichan.Widget_moveToBottom(*args)

    def focusNext(*args):
        """focusNext(self)"""
        return _guichan.Widget_focusNext(*args)

    def focusPrevious(*args):
        """focusPrevious(self)"""
        return _guichan.Widget_focusPrevious(*args)

    def showWidgetPart(*args):
        """showWidgetPart(self, Widget widget, Rectangle area)"""
        return _guichan.Widget_showWidgetPart(*args)

    def setId(*args):
        """setId(self, string id)"""
        return _guichan.Widget_setId(*args)

    def getId(*args):
        """getId(self) -> string"""
        return _guichan.Widget_getId(*args)

    def showPart(*args):
        """showPart(self, Rectangle rectangle)"""
        return _guichan.Widget_showPart(*args)

Widget_swigregister = _guichan.Widget_swigregister
Widget_swigregister(Widget)

def Widget_setGlobalFont(*args):
  """Widget_setGlobalFont(Font font)"""
  return _guichan.Widget_setGlobalFont(*args)

def Widget_widgetExists(*args):
  """Widget_widgetExists(Widget widget) -> bool"""
  return _guichan.Widget_widgetExists(*args)

class WidgetListener(_object):
    """Proxy of C++ WidgetListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetListener, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _guichan.delete_WidgetListener
    __del__ = lambda self : None;
    def widgetResized(*args):
        """widgetResized(self, Event event)"""
        return _guichan.WidgetListener_widgetResized(*args)

    def widgetMoved(*args):
        """widgetMoved(self, Event event)"""
        return _guichan.WidgetListener_widgetMoved(*args)

    def widgetHidden(*args):
        """widgetHidden(self, Event event)"""
        return _guichan.WidgetListener_widgetHidden(*args)

    def widgetShown(*args):
        """widgetShown(self, Event event)"""
        return _guichan.WidgetListener_widgetShown(*args)

WidgetListener_swigregister = _guichan.WidgetListener_swigregister
WidgetListener_swigregister(WidgetListener)

class Slider(Widget,MouseListener,KeyListener):
    """Proxy of C++ Slider class"""
    __swig_setmethods__ = {}
    for _s in [Widget,MouseListener,KeyListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slider, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget,MouseListener,KeyListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Slider, name)
    __repr__ = _swig_repr
    Horizontal = _guichan.Slider_Horizontal
    Vertical = _guichan.Slider_Vertical
    def __init__(self, *args): 
        """
        __init__(self, double scaleEnd=1.0) -> Slider
        __init__(self) -> Slider
        __init__(self, double scaleStart, double scaleEnd) -> Slider
        """
        this = _guichan.new_Slider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _guichan.delete_Slider
    __del__ = lambda self : None;
    def setScale(*args):
        """setScale(self, double scaleStart, double scaleEnd)"""
        return _guichan.Slider_setScale(*args)

    def getScaleStart(*args):
        """getScaleStart(self) -> double"""
        return _guichan.Slider_getScaleStart(*args)

    def setScaleStart(*args):
        """setScaleStart(self, double scaleStart)"""
        return _guichan.Slider_setScaleStart(*args)

    def getScaleEnd(*args):
        """getScaleEnd(self) -> double"""
        return _guichan.Slider_getScaleEnd(*args)

    def setScaleEnd(*args):
        """setScaleEnd(self, double scaleEnd)"""
        return _guichan.Slider_setScaleEnd(*args)

    def getValue(*args):
        """getValue(self) -> double"""
        return _guichan.Slider_getValue(*args)

    def setValue(*args):
        """setValue(self, double value)"""
        return _guichan.Slider_setValue(*args)

    def setMarkerLength(*args):
        """setMarkerLength(self, int length)"""
        return _guichan.Slider_setMarkerLength(*args)

    def getMarkerLength(*args):
        """getMarkerLength(self) -> int"""
        return _guichan.Slider_getMarkerLength(*args)

    def setOrientation(*args):
        """setOrientation(self, Orientation orientation)"""
        return _guichan.Slider_setOrientation(*args)

    def getOrientation(*args):
        """getOrientation(self) -> Orientation"""
        return _guichan.Slider_getOrientation(*args)

    def setStepLength(*args):
        """setStepLength(self, double length)"""
        return _guichan.Slider_setStepLength(*args)

    def getStepLength(*args):
        """getStepLength(self) -> double"""
        return _guichan.Slider_getStepLength(*args)

    def draw(*args):
        """draw(self, Graphics graphics)"""
        return _guichan.Slider_draw(*args)

    def mousePressed(*args):
        """mousePressed(self, MouseEvent mouseEvent)"""
        return _guichan.Slider_mousePressed(*args)

    def mouseDragged(*args):
        """mouseDragged(self, MouseEvent mouseEvent)"""
        return _guichan.Slider_mouseDragged(*args)

    def mouseWheelMovedUp(*args):
        """mouseWheelMovedUp(self, MouseEvent mouseEvent)"""
        return _guichan.Slider_mouseWheelMovedUp(*args)

    def mouseWheelMovedDown(*args):
        """mouseWheelMovedDown(self, MouseEvent mouseEvent)"""
        return _guichan.Slider_mouseWheelMovedDown(*args)

    def keyPressed(*args):
        """keyPressed(self, KeyEvent keyEvent)"""
        return _guichan.Slider_keyPressed(*args)

Slider_swigregister = _guichan.Slider_swigregister
Slider_swigregister(Slider)



